// If you make changes here, remember to update /docs/digraphs.md
const digraphs = new Map([
  ["'n", "ŉ"],
  ["a!", "à"],
  ["a'", "á"],
  ["a(", "ă"],
  ["a-", "ā"],
  ["a:", "ä"],
  ["a;", "ą"],
  ["a<", "ǎ"],
  ["a>", "â"],
  ["a?", "ã"],
  ["aa", "å"],
  ["ae", "æ"],
  ["c'", "ć"],
  ["c,", "ç"],
  ["c.", "ċ"],
  ["c<", "č"],
  ["c>", "ĉ"],
  ["d-", "ð"],
  ["d/", "đ"],
  ["d<", "ď"],
  ["e!", "è"],
  ["e'", "é"],
  ["e(", "ĕ"],
  ["e-", "ē"],
  ["e.", "ė"],
  ["e:", "ë"],
  ["e;", "ę"],
  ["e<", "ě"],
  ["e>", "ê"],
  ["g'", "ǵ"],
  ["g(", "ğ"],
  ["g,", "ģ"],
  ["g.", "ġ"],
  ["g>", "ĝ"],
  ["h/", "ħ"],
  ["h>", "ĥ"],
  ["i!", "ì"],
  ["i'", "í"],
  ["i(", "ĭ"],
  ["i-", "ī"],
  ["i.", "ı"],
  ["i:", "ï"],
  ["i;", "į"],
  ["i<", "ǐ"],
  ["i>", "î"],
  ["i?", "ĩ"],
  ["ij", "ĳ"],
  ["j<", "ǰ"],
  ["j>", "ĵ"],
  ["k,", "ķ"],
  ["kk", "ĸ"],
  ["l'", "ĺ"],
  ["l,", "ļ"],
  ["l.", "ŀ"],
  ["l/", "ł"],
  ["n'", "ń"],
  ["n,", "ņ"],
  ["n<", "ň"],
  ["n?", "ñ"],
  ["ng", "ŋ"],
  ["n~", "ñ"],
  ["o!", "ò"],
  ["o'", "ó"],
  ["o(", "ŏ"],
  ["o-", "ō"],
  ["o/", "ø"],
  ["o9", "◎"],
  ["o:", "ö"],
  ["o<", "ǒ"],
  ["o>", "ô"],
  ["o?", "õ"],
  ["oe", "œ"],
  ["r'", "ŕ"],
  ["r<", "ř"],
  ["s'", "ś"],
  ["s,", "ş"],
  ["s<", "š"],
  ["s>", "ŝ"],
  ["ss", "ß"],
  ["t,", "ţ"],
  ["t/", "ŧ"],
  ["t<", "ť"],
  ["th", "þ"],
  ["u!", "ù"],
  ["u'", "ú"],
  ["u(", "ŭ"],
  ["u-", "ū"],
  ["u0", "ů"],
  ["u9", "ư"],
  ["u:", "ü"],
  ["u;", "ų"],
  ["u<", "ǔ"],
  ["u>", "û"],
  ["u?", "ũ"],
  ["w>", "ŵ"],
  ["y'", "ý"],
  ["y:", "ÿ"],
  ["y>", "ŷ"],
  ["z'", "ź"],
  ["z.", "ż"],
  ["z<", "ž"],
  ['o"', "ő"],
  ['u"', "ű"],

  ["A!", "À"],
  ["A'", "Á"],
  ["A(", "Ă"],
  ["A-", "Ā"],
  ["A:", "Ä"],
  ["A;", "Ą"],
  ["A<", "Ǎ"],
  ["A>", "Â"],
  ["A?", "Ã"],
  ["AA", "Å"],
  ["AE", "Æ"],
  ["C'", "Ć"],
  ["C,", "Ç"],
  ["C.", "Ċ"],
  ["C<", "Č"],
  ["C>", "Ĉ"],
  ["D-", "Ð"],
  ["D/", "Đ"],
  ["D<", "Ď"],
  ["E!", "È"],
  ["E'", "É"],
  ["E(", "Ĕ"],
  ["E-", "Ē"],
  ["E.", "Ė"],
  ["E:", "Ë"],
  ["E;", "Ę"],
  ["E<", "Ě"],
  ["E>", "Ê"],
  ["G'", "Ǵ"],
  ["G(", "Ğ"],
  ["G,", "Ģ"],
  ["G.", "Ġ"],
  ["G>", "Ĝ"],
  ["H/", "Ħ"],
  ["H>", "Ĥ"],
  ["I!", "Ì"],
  ["I'", "Í"],
  ["I(", "Ĭ"],
  ["I-", "Ī"],
  ["I.", "İ"],
  ["I:", "Ï"],
  ["I;", "Į"],
  ["I<", "Ǐ"],
  ["I>", "Î"],
  ["I?", "Ĩ"],
  ["IJ", "Ĳ"],
  ["J<", "ǰ"],
  ["J>", "Ĵ"],
  ["K,", "Ķ"],
  ["KK", "ĸ"],
  ["L'", "Ĺ"],
  ["L,", "Ļ"],
  ["L.", "Ŀ"],
  ["L/", "Ł"],
  ["N'", "Ń"],
  ["N,", "Ņ"],
  ["N<", "Ň"],
  ["N?", "Ñ"],
  ["NG", "Ŋ"],
  ["N~", "Ñ"],
  ["O!", "Ò"],
  ["O'", "Ó"],
  ["O(", "Ŏ"],
  ["O-", "Ō"],
  ["O/", "Ø"],
  ["O9", "◎"],
  ["O:", "Ö"],
  ["O<", "Ǒ"],
  ["O>", "Ô"],
  ["O?", "Õ"],
  ["OE", "Œ"],
  ["R'", "Ŕ"],
  ["R<", "Ř"],
  ["S'", "Ś"],
  ["S,", "Ş"],
  ["S<", "Š"],
  ["S>", "Ŝ"],
  ["T,", "Ţ"],
  ["T/", "Ŧ"],
  ["T<", "Ť"],
  ["TH", "Þ"],
  ["U!", "Ù"],
  ["U'", "Ú"],
  ["U(", "Ŭ"],
  ["U-", "Ū"],
  ["U0", "Ů"],
  ["U9", "Ư"],
  ["U:", "Ü"],
  ["U;", "Ų"],
  ["U<", "Ǔ"],
  ["U>", "Û"],
  ["U?", "Ũ"],
  ["W>", "Ŵ"],
  ["Y'", "Ý"],
  ["Y:", "Ÿ"],
  ["Y>", "Ŷ"],
  ["Z'", "Ź"],
  ["Z.", "Ż"],
  ["Z<", "Ž"],
  ['O"', "Ő"],
  ['U"', "Ű"],

  // misc.
  ["CX", "Ĉ"],
  ["Cx", "Ĉ"],
  ["GX", "Ĝ"],
  ["Gx", "Ĝ"],
  ["HX", "Ĥ"],
  ["Hx", "Ĥ"],
  ["JX", "Ĵ"],
  ["Jx", "Ĵ"],
  ["SX", "Ŝ"],
  ["Sx", "Ŝ"],
  ["UX", "Ŭ"],
  ["Ux", "Ŭ"],
  ["cx", "ĉ"],
  ["gx", "ĝ"],
  ["hx", "ĥ"],
  ["jx", "ĵ"],
  ["sx", "ŝ"],
  ["ux", "ŭ"],
]);

function reverseString(text: string): string {
  return text.split("").reverse().join("");
}

function substituteDigraph(digraph: string): string {
  if (!digraph.startsWith("\\")) {
    throw new Error("digraph should start with '\\'");
  }

  const key = digraph.slice(1);
  const result = digraphs.get(key);
  if (result != null) {
    return result;
  }
  return digraphs.get(reverseString(key)) || digraph;
}

export function substituteDigraphs(text: string): string {
  let start = 0;
  while (start < text.length) {
    if (text[start] === "\\") {
      const digraph = text.slice(start, start + 3);
      text =
        text.slice(0, start) +
        substituteDigraph(digraph) +
        text.slice(start + 3);
    }
    ++start;
  }
  return text;
}
